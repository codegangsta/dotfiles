*vim-go.txt* Go development plugin
*vim-go*

===============================================================================
#                                                                             #
#             ##     ## #### ##     ##          ######    #######             #
#             ##     ##  ##  ###   ###         ##    ##  ##     ##            #
#             ##     ##  ##  #### ####         ##        ##     ##            #
#             ##     ##  ##  ## ### ## ####### ##   #### ##     ##            #
#              ##   ##   ##  ##     ##         ##    ##  ##     ##            #
#               ## ##    ##  ##     ##         ##    ##  ##     ##            #
#                ###    #### ##     ##          ######    #######             #
#                                                                             #
===============================================================================
CONTENTS                                                          *go-contents*

	1. Intro........................................|go-intro|
	2. Install......................................|go-install|
	3. Commands.....................................|go-commands|
	4. Settings.....................................|go-settings|
	5. Mappings.....................................|go-mappings|
	6. Credits......................................|go-credits|

===============================================================================
INTRO                                                                *go-intro*

Full featured Go development environment support for Vim. vim-go installs
automatically all necessary binaries if they are not found. It comes with
pre-defined sensible settings (like auto gofmt on save), has autocomplete,
snippet support, go toolchain commands, etc... Do not use it with other Go
plugins.

  * Improved Syntax highlighting, such as Functions, Operators, Methods..
  * Auto completion support via `gocode`
  * Better `gofmt` on save, keeps cursor position and doesn't break your undo
    history
  * Go to symbol/declaration with `godef`
  * Automatically import packages via `goimports`
  * Compile and `go build` your package, install it with `go install`
  * `go run` quickly your current file/files
  * Run `go test` and see any errors in quickfix window
  * Lint your code with `golint`
  * Run your code trough `go vet` to catch static errors.
  * Advanced source analysis tool with `oracle`
  * List all source files and dependencies
  * Checking with `errcheck` for unchecked errors.
  * Integrated and improved snippets. Supports `ultisnips` or `neosnippet`
  * Share your current code to play.golang.org
  * Type information about the underlying identifier 

===============================================================================
INSTALL                                                           *go-install*

If you use pathogen, just clone it into your bundle directory: >

	$ cd ~/.vim/bundle
	$ git clone https://github.com/fatih/vim-go.git
<
For the first Vim start it will try to download and install all necessary go
binaries. To disable this behaviour please check out |go-settings|.


Autocompletion is enabled by default via `<C-x><C-o>`, to get real-time
completion (completion by type) install:
https://github.com/Valloric/YouCompleteMe or
https://github.com/Shougo/neocomplete.vim

===============================================================================
COMMANDS                                                          *go-commands*

                                                                  *:GoImport*
:GoImport [path]

    Import ensures that the provided package {path} is imported in the current
    Go buffer, using proper style and ordering.  If {path} is already being
    imported, an error will be displayed and the buffer will be untouched.

                                                                *:GoImportAs*
:GoImportAs [localname] [path]

    Same as Import, but uses a custom local name for the package.

                                                                    *:GoDrop*
:GoDrop [path]

    Remove the import line for the provided package {path}, if present in the
    current Go buffer.  If {path} is not being imported, an error will be
    displayed and the buffer will be untouched.

                                                        *:GoDisableGoimports*
:GoDisableGoimports

    Disable goimports and use "fmt" for |:GoFmt| command

                                                         *:GoEnableGoimports*
:GoEnableGoimports

    Enable goimports and use "goimports" for |:GoFmt| command

                                                                    *:GoLint*
:GoLint

    Run golint for the current Go file.

                                                                     *:GoDoc*
:GoDoc [word]

    Open the relevant GoDoc in split window for either the word[s] passed to
    the command or by default, the word under the cursor.

                                                              *:GoDocBrowser*
:GoDocBrowser [word]

    Open the relevant GoDoc in browser for either the word[s] passed to the
    command or by default, the word under the cursor.

                                                                     *:GoFmt*
:GoFmt

    Filter the current Go buffer through gofmt.  It tries to preserve cursor
    position and avoids replacing the buffer with stderr output.

                                                                     *:GoPlay*
:[range]GoPlay

    Share snippet to play.golang.org. If no [range] is given it shares
    the whole file, otherwise the selected lines are shared. Snippet URL
    is copied to system clipboard if Vim is compiled with 'clipboard' or
     'xterm-clipboard' otherwise it's get yanked into the `""` register.

                                                                     *:GoVet*
:GoVet

    Run `go vet` for the directory under your current file. Vet examines Go
    source code and reports suspicious constructs, such as Printf calls whose
    arguments do not align with the format string. Vet uses heuristics that do not
    guarantee all reports are genuine problems, but it can find errors not caught
    by the compilers.

                                                                     *:GoDef*
:GoDef [identifier]

    Goto declaration/definition for the given [identifier]. If no argument is
    given, it will jump to the declaration under the cursor.

                                                                     *:GoRun*
:GoRun[!] [expand]

    Build and run your current main package. By default all main files for the
    current file is used. If an argument is passed, 'expand' is used as file
    selector. For example use `:GoRun %` to select only the current file only.  

    If [!] is not given the first error is jumped to.

                                                                   *:GoBuild*
:GoBuild[!]

    Build your package with `go build`. It automatically builds only the files
    that depends on the current file. GoBuild doesn't produce a result file.
    Use 'make' to create a result file. 

    If [!] is not given the first error is jumped to.

                                                                    *:GoInfo*
:GoInfo
    Show type information about the identifer under the cursor. For example
    putting it above a function call is going to show the full function
    signature. It uses gocode to get the type informations.


                                                                 *:GoInstall*
:GoInstall

  Install your package with `go install`.

                                                                    *:GoTest*
:GoTest [expand]

    Test your _test.go files via in your current directory. Errors are
    populated in quickfix window.  If an argument is passed, 'expand' is used
    as file selector (useful for cases like `:GoTest ./...`).

                                                                *:GoErrCheck*
:GoErrCheck

    Check for unchecked errors in you current package. Errors are populated in
    quickfix window.

                                                                   *:GoFiles*
:GoFiles

    Show source files that depends for the current package

                                                                    *:GoDeps*
:GoDeps

    Show dependencies for the current package

                                                          *:GoUpdateBinaries*
:GoUpdateBinaries

    Update all Go binaries under `g:go_bin_path`

                                                          *:GoOracleDescribe*
:GoOracleDescribe

    Describe selected syntax: definition, methods, etc

                                                           *:GoOracleCallees*
:GoOracleCallees

    Show possible targets of selected function call

                                                           *:GoOracleCallers*
:GoOracleCallers

    Show possible callers of selected function

                                                      *:GoOracleCallstack*
:GoOracleCallstack

    Show path from callgraph root to selected function

                                                         *:GoOracleCallgraph*
:GoOracleCallgraph

    Show the callgraph of the current program.

                                                        *:GoOracleImplements*
:GoOracleImplements

    Show 'implements' relation for selected package

                                                      *:GoOracleChannelPeers*
:GoOracleChannelPeers

    Show send/receive corresponding to selected channel op

                                                      *:GoOracleFreevars*
:GoOracleFreevars

    Show free variables of selection

                                                      *:GoOracleReferrers*
:GoOracleReferrers

    Show all refs to entity denoted by selected identifier

===============================================================================
MAPPINGS                                                        *go-mappings*

vim-go has several <Plug> keys which can be used to create custom mappings
For example, to create a mapping that `go run` the current file create a
mapping for the `(go-run)`: >

  au FileType go nmap <leader>r <Plug>(go-run)

As always one is free to create more advanced mappings or functions based
with |go-commands|. Available <Plug> keys are:

                                                                  *(go-run)*

Calls `go run` for the current file


                                                                *(go-build)*

Calls `go build` for the current package


                                                                 *(go-info)*

Shows type information for the word under the cursor


                                                              *(go-install)*

Calls `go install` for the current package


                                                                 *(go-test)*

Calls `go test` for the current package


                                                                  *(go-vet)*

Calls `go vet` for the current package


                                                                *(go-files)*

Show source files that depends for the current package


                                                                 *(go-deps)*

Show dependencies for the current package

                                                                  *(go-doc)*

Show the relevant GoDoc for the word under the cursor in a split window
leftabove (default mode).

                                                            *(go-doc-split)*

Show the relevant GoDoc for the word under the cursor in a split window.


                                                         *(go-doc-vertical)*

Show the relevant GoDoc for the word under the cursor in a vertical split
window.


                                                              *(go-doc-tab)*

Show the relevant GoDoc for the word under the cursor in a tab window.


                                                          *(go-doc-browser)*

Show the relevant GoDoc for the word under in browser

                                                                  *(go-def)*

Goto declaration/definition. Results are shown in the current buffer.


                                                            *(go-def-split)*

Goto declaration/definition. Results are shown in a split window.


                                                         *(go-def-vertical)*

Goto declaration/definition. Results are shown in a vertical split window.


                                                              *(go-def-tab)*

Goto declaration/definition. Results are shown in a tab window.



===============================================================================
SETTINGS                                                        *go-settings*

                                                *'g:go_play_browser_command'*

Use this option to change the browser that is used to open the snippet url
posted to play.golang.org with |:GoPlay| or for the relevant documentation
used with |:GoDocBrowser|. By default it tries to find it automatically for
the current OS. >

  let g:play_browser_command = ''
<
                                                   *'g:go_play_open_browser'*

Use this option to open browser after posting the snippet to play.golang.org
with |:GoPlay|. By default it's enabled. >

  let g:go_play_open_browser = 1
<
                                                      *'g:go_auto_type_info'*

Use this option to show the type info (|:GoInfo|) for the word under the cursor
automatically. Whenever the cursor changes the type info will be updated.
By default it's disabled >

  let g:go_auto_type_info = 0
<
                                                        *'g:go_fmt_autosave'*

Use this option to auto |:GoFmt| on save. By default it's enabled >

  let g:go_fmt_autosave = 1
<
                                                         *'g:go_fmt_command'*

Use this option to define which tool is used to gofmt. By default `goimports`
is used >

  let g:go_fmt_command = "goimports"
<
                                                         *'g:go_fmt_options'*

Use this option to add additional options to the |g:go_fmt_command|. Default
is empty. >

  let g:go_fmt_options = ''
<
                                                   *'g:go_fmt_fail_silently'*

Use this option to disable showing a quickfix window when |g:go_fmt_command|
fails. By default it's disabled. >

  let g:go_fmt_fail_silently = 0
<

                                                      *'g:go_snippet_engine'*

Use this option to define the default snippet engine.  By default "ultisnips"
is used. Use "neosnippet" for neosnippet.vim: >

  let g:go_snippet_engine = "ultisnips"
<
                                                 *'g:go_disable_autoinstall'*

By default vim-go automatically install all necessary tools which are used
for |:go-commands| at startup. Disable it if you don't wish to be updated.
By default it is enabled.  >

  let g:go_disable_autoinstall = 0
<
                                                            *'g:go_bin_path'*

Use this option to change default path for vim-go tools. By default it's set
to `$HOME/.vim-go/`. To change it: >

  let g:go_bin_path = expand("$HOME/.vim-go/")

<

                                      *'g:go_highlight_array_whitespace_error'*

Highlights white space after "[]". >

  let g:go_highlight_array_whitespace_error = 1
<

                                      *'g:go_highlight_chan_whitespace_error'*

Highlights white space around the communications operator that don't follow
the standard style. >

  let g:go_highlight_chan_whitespace_error = 1
<

                                                *'g:go_highlight_extra_types'*

Highlights commonly used library types (io.Reader, etc.). >

  let g:go_highlight_extra_types = 1
<

                                            *'g:go_highlight_space_tab_error'*

Highlights instances of tabs following spaces. >

  let g:go_highlight_space_tab_error = 1
<
                                  *'g:go_highlight_trailing_whitespace_error'*

Highlights trailing white space. >

  let g:go_highlight_trailing_whitespace_error = 1

<
                                                  *'g:go_highlight_operators'*

Highlights operators such as `:=` , `==`, `-=`, etc ...By default it's
enabled. >

	let g:go_highlight_operators = 1
<
                                                *'g:go_highlight_functions'*

Highlights function names. By default it's enabled. >

	let g:go_highlight_functions = 1
<
                                                  *'g:go_highlight_methods'*

Highlights method names. By default it's enabled. >

	let g:go_highlight_methods = 1
<
                                                  *'g:go_highlight_structs'*

Highlights struct names. By default it's enabled. >

	let g:go_highlight_structs = 1
<
===============================================================================
CREDITS                                                         *go-credits*

* Go Authors for offical vim plugins
* Gocode, Godef, Golint, Oracle, Goimports, Errcheck projects and authors of
  those projects.
* Other vim-plugins, thanks for inspiration (vim-golang, go.vim, vim-gocode,
  vim-godef)
* vim-go contributors: https://github.com/fatih/vim-go/graphs/contributors


vim:ft=help:et:ts=2:sw=2:sts=2:norl
